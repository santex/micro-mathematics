{"cursor":"2080","size":15,"audio":[],"currentlang":"en","article":"\n\nThe 'cut', in Prolog, is a goal, written as !, which always succeeds, but cannot\nbe backtracked past. It is best used to prevent unwanted backtracking, for\nexample, to prevent extra solutions being found by Prolog and avoid additional\ncomputations that are not desired or required in a program.\n\nThe cut should be used sparingly. There is a temptation to insert cuts\nexperimentally into code that is not working correctly. If a test is unnecessary\nbecause a cut has guaranteed that it is true, it is good practice to say so in a\ncomment at the appropriate place.\n\nIt is described by some as a controversial control facility Foundations of\nLogic Programming, Springer (1984). because it was added for efficiency\nreasons only and isn't a Horn clause.\n","linknr":83,"url":"Cut_(logic_programming)","recorded":1362674371,"links":11,"instances":[],"pdf":[],"categories":["Logic programming"],"headings":["Types","References"],"image":["//upload.wikimedia.org/wikipedia/en/thumb/f/f2/Edit-clear.svg/40px-Edit-clear.svg.png","//bits.wikimedia.org/static-1.21wmf10/skins/vector/images/search-ltr.png?303-4","//bits.wikimedia.org/images/wikimedia-button.png","//bits.wikimedia.org/static-1.21wmf10/skins/common/images/poweredby_mediawiki_88x31.png"],"tags":[],"members":[],"related":["Prolog","Horn_clause"]}